
const express = require('express');
const fs = require('fs');
const path = require('path');
const app = express();
const PORT = 3000;

const KEYS_FILE = 'keys.json';
const LOGS_FILE = 'logs.json';
const EXPIRATION_HOURS = 32;

app.use(express.json());
app.use(express.static('public'));

// Carrega ou inicializa o arquivo de keys
let keys = fs.existsSync(KEYS_FILE) ? JSON.parse(fs.readFileSync(KEYS_FILE)) : [];

// Remove keys expiradas
function removerKeysExpiradas() {
  const agora = Date.now();
  keys = keys.filter(k => (agora - k.timestamp) < EXPIRATION_HOURS * 60 * 60 * 1000);
  fs.writeFileSync(KEYS_FILE, JSON.stringify(keys, null, 2));
}

// Gera uma key aleatória
function gerarKeyAleatoria() {
  return 'SARANY-' + Math.random().toString(36).substr(2, 10).toUpperCase();
}

// Rota para gerar key
app.post('/generate', (req, res) => {
  removerKeysExpiradas();
  const key = gerarKeyAleatoria();
  keys.push({ key, timestamp: Date.now() });
  fs.writeFileSync(KEYS_FILE, JSON.stringify(keys, null, 2));
  res.json({ key });
});

// Rota para verificar key
app.post('/verify', (req, res) => {
  const { key } = req.body;
  const nick = req.query.nick || "Desconhecido";
  removerKeysExpiradas();

  const keyValida = keys.find(k => k.key === key);

  if (keyValida) {
    const log = {
      nick,
      key,
      data: new Date().toLocaleString()
    };
    let logs = [];
    if (fs.existsSync(LOGS_FILE)) {
      logs = JSON.parse(fs.readFileSync(LOGS_FILE));
    }
    logs.push(log);
    fs.writeFileSync(LOGS_FILE, JSON.stringify(logs, null, 2));
    res.json({ success: true });
  } else {
    res.json({ success: false });
  }
});

app.listen(PORT, () => {
  console.log(`✅ Servidor rodando em http://localhost:${PORT}`);
});